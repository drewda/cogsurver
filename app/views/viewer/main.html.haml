!!!
%head
  =stylesheet_link_tag "viewer"
  =javascript_include_tag "jquery"
  =javascript_include_tag "json2", "underscore", "backbone", "backbone.rails"
  =javascript_include_tag "polymaps", "polymaps-utils"
  =javascript_include_tag "http://github.com/simplegeo/polymaps/raw/v2.3.0/lib/raphaeljs/icons.js"
  =javascript_include_tag "jquery-ui.min"
  =stylesheet_link_tag "jquery-ui/ui-lightness/jquery-ui"
  =javascript_include_tag "jquery.scrollTo"

%body
  #map
  #user-panel.panel
    %li Welcome <strong>#{current_user.full_name}</strong>
    %li <a href="#">Your details</a>
    %li <a href="#">Help</a>
    %li #{link_to "Sign out", destroy_user_session_path}
  #travel-panel.panel
  #places-panel.panel
    #landmarks-placard.placard
      .number <img src="/images/ajax-loader.gif" alt="loading..." />
      .title landmarks
    #visits-placard.placard
      .number <img src="/images/ajax-loader.gif" alt="loading..." />
      .title visits
    #estimates-placard.placard
      .number <img src="/images/ajax-loader.gif" alt="loading..." />
      .title estimates
  #landmarks-panel.panel
    #landmarks-list
    
  :javascript
    var po = org.polymaps;
    
    var map = po.map()
        .container(document.getElementById("map").appendChild(po.svg("svg")))
        .add(po.interact())
        .add(po.hash());
    
    var previousMapCenter; 
    
    map.add(po.image()
        .url(po.url("http://{S}tile.cloudmade.com"
        + "/7edf224d2b714c238a8ed621091d63bc"
        + "/998/256/{Z}/{X}/{Y}.png")
        .hosts(["a.", "b.", "c.", ""])));
        
    map.add(po.compass()
        .pan("none"));
        
    /* LANDMARK LAYER */
    var landmarkLayer;
    function loadLandmarks(e) { 
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
        
        /* landmark icon */
        g.appendChild(icons.marker());
        g.setAttribute("transform", c.getAttribute("transform") + ", scale(3.0)");
        c.parentNode.replaceChild(g, c);
        f.element.setAttribute('id', 'landmark-icon-' + f.data.id);
        f.element.appendChild(po.svg("id")
         .appendChild(document.createTextNode(f.data.id))
         .parentNode);
         
         $(f.element).hover(function(event) {
           id = $('id', event.currentTarget).text();
           landmarks.get(id).set({mouseover: true});
         }, function(event) {
           id = $('id', event.currentTarget).text();
           landmarks.get(id).set({mouseover: false});
         });
      }
    }
    
    /* ESTIMATE LAYER */
    var estimateLayer;
    function loadEstimates(e) { // TODO
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
        c.setAttribute('id', f.data.id);
        c.setAttribute('class', f.data.class);
        $(c).hover(function(e) {
          directionDistanceEstimates.get(e.currentTarget.getAttribute('id').split('-').pop()).set({mouseover: true});
        }, function(e) {
          directionDistanceEstimates.get(e.currentTarget.getAttribute('id').split('-').pop()).set({mouseover: false});        
        });
      }
    }
        
  :javascript
    /* MODELS */
    var landmarkBeingMovedId;
    window.Landmark = Backbone.Model.extend({
      name: 'landmark',
      move: function() {
        var yes = confirm('To move ' + this.get('name') + ' to a new location, click a point on the map.');
        if (yes) {
          landmarkBeingMovedId = this.attributes.id;
          $(map.container()).click(function(event) {
            latLon = map.pointLocation({x: event.pageX, y: event.pageY});
            landmarks.get(landmarkBeingMovedId).get('longitude') = latLon.lon;
            landmarks.get(landmarkBeingMovedId).get('latitude') = latLon.lat;
            landmarks.get(landmarkBeingMovedId).save();
            landmarks.fetch();
            $(event.currentTarget).unbind('click');
          });
        }
      }
    });
    window.LandmarkVisit = Backbone.Model.extend({
      name: 'landmark_visit'
    });
    window.DirectionDistanceEstimate = Backbone.Model.extend({
      name: 'direction_distance_estimate',
      geojson: function() {
        if (this.get("display")) {
          if (this.get("kind") === "landmarkToLandmark") {
            return [
                     { type: "Feature",
                       class: "estimated-line",
                       id: "estimated-line-" + this.id,
                       geometry: {
                         type: "LineString",
                         coordinates: [
                           [Number(landmarks.get(this.get('start_landmark_id')).get('longitude')), Number(landmarks.get(this.get('start_landmark_id')).get('latitude'))],
                           [this.get('end_point').longitude, this.get('end_point').latitude]
                         ]
                       }                    
                     },
                     { type: "Feature",
                       id: "actual-line-" + this.id,
                       class: "actual-line",
                       geometry: {
                         type: "LineString",
                         coordinates: [
                           [Number(landmarks.get(this.get('start_landmark_id')).get('longitude')), Number(landmarks.get(this.get('start_landmark_id')).get('latitude'))],
                           [Number(landmarks.get(this.get('target_landmark_id')).get('longitude')), Number(landmarks.get(this.get('target_landmark_id')).get('latitude'))]
                         ]
                       }
                     }
                   ]
          }
          else if (this.get("kind") === "landmarkToNorth") {
            //TODO
            return null;
          }
        }
      }
    });
    
    /* COLLECTIONS */
    window.Landmarks = Backbone.Collection.extend({
      name: 'landmarks',
      model: Landmark,
      url: '/api/landmarks',
      initialize: function() {
        this.bind("change", function(m) {
          console.log('landmark-' + m.get('id') + ': ' + JSON.stringify(m.changedAttributes()));
        })
      },
      geojson: function() {
        var geojson = [];
        _.each(landmarks.models, function(l) {
          geojson.push({ 
            id: l.attributes.id,
            geometry: {
              type: "Point",
              coordinates: [parseFloat(l.attributes.longitude), parseFloat(l.attributes.latitude)]
            }, 
            properties: {
              name: l.attributes.name
            }
          });
        });
        return geojson;
      }
    });
    window.LandmarkVisits = Backbone.Collection.extend({
      name: 'landmark_visits',
      model: LandmarkVisit,
      url: '/api/landmark_visits.json'
    });
    window.DirectionDistanceEstimates = Backbone.Collection.extend({
      name: 'direction_distance_estimates',
      model: DirectionDistanceEstimate,
      url: '/api/direction_distance_estimates.json',
      initialize: function() {
        this.bind("change", function(m) {
          console.log('dde-' + m.get('id') + ': ' + JSON.stringify(m.changedAttributes()));
        })
      },
      geojson: function() {
        geojson = [];
        this.each(function(dde) {
          if (dde.geojson()) {
            geojson = geojson.concat(dde.geojson());
          }
        });
        return geojson;
      }
    });
    
    window.landmarks = new Landmarks;
    window.landmarkVisits = new LandmarkVisits;
    window.directionDistanceEstimates = new DirectionDistanceEstimates;
    
    /* VIEWS */
    window.LandmarksPlacard = Backbone.View.extend({
      id: 'landmarks-placard',
      initialize: function() {
        landmarks.bind('refresh', this.render);
      },
      render: function() {
        $('#landmarks-placard .number').text(landmarks.length);
        if (landmarks.length == 1) $('#landmarks-placard .title').text('landmark');
      } 
    });
    window.VisitsPlacard = Backbone.View.extend({
      id: 'visits-placard',
      initialize: function() {
        landmarkVisits.bind('refresh', this.render);
      },
      render: function() {
        $('#visits-placard .number').text(landmarkVisits.length);
        if (landmarkVisits.length == 1) $('#visits-placard .title').text('visit');
      } 
    });
    window.EstimatesPlacard = Backbone.View.extend({
      id: 'estimates-placard',
      initialize: function() {
        directionDistanceEstimates.bind('refresh', this.render);
      },
      render: function() {
        $('#estimates-placard .number').text(directionDistanceEstimates.length);
        if (directionDistanceEstimates.length == 1) $('#estimates-placard .title').text('estimate');
      } 
    });
    window.LandmarkLayerView = Backbone.View.extend({
      initialize: function() {
        landmarks.bind('refresh', this.render);
        landmarks.bind('change', function(m) {
          if (m.changedAttributes().mouseover == true) {
            var landmarkLabel = po.svg('text');
            $(landmarkLabel).attr('id', 'landmark-label-' + m.id);
            landmarkLabel.setAttribute('transform', 'scale(2.5) translate(5 0)');
            $(landmarkLabel).text(m.get('name'));
            $('#landmark-icon-' + m.id).append(landmarkLabel);
          }
          else if (m.changedAttributes().mouseover == false) {
            $('#landmark-label-' + m.id).remove();
          }
        });
      },
      render: function() {
        map.extent(bounds(landmarks.geojson())).zoomBy(-.5);
        if (landmarkLayer) map.remove(landmarkLayer);
        landmarkLayer = po.geoJson()
                          .features(landmarks.geojson())
                          .on("load", loadLandmarks)
                          .id("landmark-layer")
                          .tile(false)
                          .scale("fixed");
        map.add(landmarkLayer);
      }
    });
    window.EstimateLayerView = Backbone.View.extend({
      initialize: function() {
        directionDistanceEstimates.bind('all', this.render);
        
      },
      render: function() {
        if (estimateLayer) map.remove(estimateLayer);
        estimateLayer = po.geoJson()
                          .features(directionDistanceEstimates.geojson())
                          .on("load", loadEstimates)
                          .id("estimate-layer")
                          .tile(false)
                          .scale("fixed");
        map.add(estimateLayer);
      }
    });
    window.LandmarkItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'landmark-item',
      template: _.template('<%= landmark.name %> <br/>'
                           + '<div class="buttons">'
                           + '<a class="move-landmark-button" id="move-landmark-button-<%= landmark.id %>" href="#">move</a> '
                           + '<span class="estimate-buttons">'
                           + '<input type="checkbox" class="to-landmark-button" id="to-landmark-button-<%= landmark.id %>">'
                           + '<label for="to-landmark-button-<%= landmark.id %>">to</label>'
                           + '<input type="checkbox" class="from-landmark-button" id="from-landmark-button-<%= landmark.id %>">'
                           + '<label for="from-landmark-button-<%= landmark.id %>">from</label>'
                           + '</span>'
                           + '</div>'),
      initialize: function() {
        landmarks.bind('change', function(m) {
          var showButtons = false;
          
          if (m.get('estimatesFrom') || m.get('estimatesTo')) {
            showButtons = true;
            $('#landmark-item-' + m.id + ' .buttons', this.el).show();
          }
          else if (!m.get('estimatesFrom') || !m.get('estimatesTo')) {
            showButtons = false;
            $('#landmark-item-' + m.id + ' .buttons', this.el).hide();
          }
          
          if (m.get('mouseover')) {
            $('#landmark-item-' + m.id + ' .buttons', this.el).show();
            $('#landmark-item-' + m.id).addClass('mouseover');
            $('#landmarks-panel').scrollTo('#landmark-item-' + m.id);
          }
          else {
            if (!showButtons) $('#landmark-item-' + m.id + ' .buttons', this.el).hide();
            $('#landmark-item-' + m.id).removeClass('mouseover');
          } 
        });
      },
      render: function() {
        $(this.el).attr('id', 'landmark-item-' + this.model.id);
        $(this.el).html(this.template(this.model.toJSON()));
        $(this.el).hover(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          previousMapCenter = map.center();
          map.center({lat: Number(landmarks.get(id).get('latitude')), lon: Number(landmarks.get(id).get('longitude'))});
          landmarks.get(id).set({mouseover: true});
        }, function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          map.center(previousMapCenter);
          landmarks.get(id).set({mouseover: false});
        });
        return this;
      },
    });
    var ee;
    window.LandmarkListView = Backbone.View.extend({
      id: 'landmarks-list',
      initialize: function() {
        landmarks.bind('refresh', this.render); 
      },
      render: function() {
        $("#landmarks-list").empty();
        
        landmarks.each(function(landmark) { 
          var view = new LandmarkItemView({model: landmark});
          this.$("#landmarks-list").append(view.render().el);
        });
        
        $('#landmarks-list .buttons a').button();
        $('#landmarks-list .buttons .estimate-buttons').buttonset();
        // $('#landmarks-list .buttons .estimate-buttons').position({of: $('#landmarks-list .buttons a'), my: 'left center', at: 'right center'});
        
        $('.move-landmark-button').click(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          landmarks.get(id).move();
        });
        
        $('.to-landmark-button').click(function(event) {
          id = Number($(event.currentTarget).attr('id').split('-').pop());
          ddes = directionDistanceEstimates.filter(function(dde) { return dde.get('target_landmark_id') === id })
          var newValue;
          if ($(event.currentTarget).is(':checked')) {
            newValue = true;
          }
          else {
            newValue = false;
          }
          _.each(ddes, function(dde) {
            dde.set({display: newValue});
          });
          landmarks.get(id).set({estimatesTo: newValue});
        });
        
        $('.from-landmark-button').click(function(event) {
          id = Number($(event.currentTarget).attr('id').split('-').pop());
          ddes = directionDistanceEstimates.filter(function(dde) { return dde.get('start_landmark_id') === id })
          var newValue;
          if ($(event.currentTarget).is(':checked')) {
            newValue = true;
          }
          else {
            newValue = false;
          }
          _.each(ddes, function(dde) {
            dde.set({display: newValue});
          });
          landmarks.get(id).set({estimatesFrom: newValue});
        }); 
      }
    });
    
    window.landmarksPlacard = new LandmarksPlacard;
    window.visitsPlacard = new VisitsPlacard;
    window.estimatesPlacard = new EstimatesPlacard;
    window.landmarkLayerView = new LandmarkLayerView;
    window.landmarksListView = new LandmarkListView;
    window.estimateLayerView = new EstimateLayerView;
    
    /* LOAD DATA */    
    landmarks.fetch(); //refresh(#{current_user.landmarks.to_json.html_safe});
    landmarkVisits.fetch(); //refresh(#{current_user.landmark_visits.to_json.html_safe});
    directionDistanceEstimates.fetch(); //refresh(#{current_user.direction_distance_estimates.to_json.html_safe});