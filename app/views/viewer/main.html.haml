!!!
%head
  =stylesheet_link_tag "viewer"
  =javascript_include_tag "jquery"
  =javascript_include_tag "json2", "underscore", "backbone", "backbone.rails"
  =javascript_include_tag "polymaps", "polymaps-utils"
  =javascript_include_tag "jquery-ui.min"
  =stylesheet_link_tag "jquery-ui/ui-lightness/jquery-ui"
  =javascript_include_tag "jquery.scrollTo"

%body
  #map
  #user-panel.panel
    %li Welcome <strong>#{current_user.full_name}</strong>
    %li <a href="#">Your details</a>
    %li <a href="#">Help</a>
    %li #{link_to "Sign out", destroy_user_session_path}
  #travel-panel.panel
    #fixes-placard.placard
      %span.number <img src="/images/ajax-loader.gif" alt="loading..." />
      %span.title fixes
  #fixes-panel.panel
    %input#fixes-toggle-checkbox(type="checkbox")
    %label(for="fixes-toggle-checkbox") show all fixes
    #fix-details
  
  #places-panel.panel
    #landmarks-placard.placard
      %span.number <img src="/images/ajax-loader.gif" alt="loading..." />
      %span.title landmarks
    #visits-placard.placard
      %span.number <img src="/images/ajax-loader.gif" alt="loading..." />
      %span.title visits
    #estimates-placard.placard
      %span.number <img src="/images/ajax-loader.gif" alt="loading..." />
      %span.title estimates
  #estimates-panel.panel
    #estimate-details
  #landmarks-panel.panel
    #landmarks-list
  
  #landmark-move-dialog(title="Move Landmark" style="display: none;")
    #instructions-block(style="display: none;")
      %p When you mark a landmark using your smart-phone, its location is recorded using the GPS. That's not always accurate. But it's never too late to correct a landmarks location.
      %p Click a new location on the map and we'll move the landmark to there.
    #success-block(style="display: none;")
      %p Success! Your landmark has been repositioned.
    #error-block(style="display: none;")
      %p Error saving to the server. Please try again.
    
  :javascript
    // http://www.elated.com/articles/working-with-dates/
    var month_names = new Array ( );
    month_names[month_names.length] = "January";
    month_names[month_names.length] = "February";
    month_names[month_names.length] = "March";
    month_names[month_names.length] = "April";
    month_names[month_names.length] = "May";
    month_names[month_names.length] = "June";
    month_names[month_names.length] = "July";
    month_names[month_names.length] = "August";
    month_names[month_names.length] = "September";
    month_names[month_names.length] = "October";
    month_names[month_names.length] = "November";
    month_names[month_names.length] = "December";
    
    var day_names = new Array ( );
    day_names[day_names.length] = "Sunday";
    day_names[day_names.length] = "Monday";
    day_names[day_names.length] = "Tuesday";
    day_names[day_names.length] = "Wednesday";
    day_names[day_names.length] = "Thursday";
    day_names[day_names.length] = "Friday";
    day_names[day_names.length] = "Saturday";
    
  :javascript
    // http://raphaeljs.com/icons/
    var icons = (function(po) {
      return {
        landmarkMarker: function() {
          var path = po.svg("path");
          path.setAttribute("transform", "translate(-16,-28)");
          path.setAttribute("d", "M16,3.5c-4.142,0-7.5,3.358-7.5,7.5c0,4.143,7.5,18.121,7.5,18.121S23.5,15.143,23.5,11C23.5,6.858,20.143,3.5,16,3.5z M16,14.584c-1.979,0-3.584-1.604-3.584-3.584S14.021,7.416,16,7.416S19.584,9.021,19.584,11S17.979,14.584,16,14.584z");
          return path;
        },
        fixMarker: function() {
          var path = po.svg("path");
          path.setAttribute("transform", "translate(-16,-28)");
          path.setAttribute("d", "M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248");
          return path;
        }
      };
    })(org.polymaps);
    
  :javascript
    var po = org.polymaps;
    
    var map = po.map()
        .container(document.getElementById("map").appendChild(po.svg("svg")))
        .add(po.interact())
        .add(po.hash());
    
    var previousMapCenter; 
    var previousMapZoom;
    
    map.add(po.image()
        .url(po.url("http://{S}tile.cloudmade.com"
        + "/7edf224d2b714c238a8ed621091d63bc"
        + "/998/256/{Z}/{X}/{Y}.png")
        .hosts(["a.", "b.", "c.", ""])));
        
    map.add(po.compass()
        .pan("none"));
    
    /* TRAVEL FIX LAYER */
    var fixLayer;
    function loadFixes(e) {
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
      
        /* fix icon */
        g.appendChild(icons.fixMarker());
        g.setAttribute("transform", c.getAttribute("transform") + ", scale(0.8)");
        c.parentNode.replaceChild(g, c);
        f.element.setAttribute('id', 'fix-icon-' + f.data.id);
        f.element.appendChild(po.svg("id")
         .appendChild(document.createTextNode(f.data.id))
         .parentNode);
       
         $(f.element).hover(function(event) {
           id = $('id', event.currentTarget).text();
           travelFixes.get(id).set({mouseover: true});
         }, function(event) {
           id = $('id', event.currentTarget).text();
           travelFixes.get(id).set({mouseover: false});
         });
      }
    }
        
    /* LANDMARK LAYER */
    var landmarkLayer;
    function loadLandmarks(e) { 
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
        
        /* landmark icon */
        g.appendChild(icons.landmarkMarker());
        g.setAttribute("transform", c.getAttribute("transform") + ", scale(3.0)");
        c.parentNode.replaceChild(g, c);
        f.element.setAttribute('id', 'landmark-icon-' + f.data.id);
        f.element.appendChild(po.svg("id")
         .appendChild(document.createTextNode(f.data.id))
         .parentNode);
         
         $(f.element).hover(function(event) {
           id = $('id', event.currentTarget).text();
           landmarks.get(id).set({mouseover: true});
         }, function(event) {
           id = $('id', event.currentTarget).text();
           landmarks.get(id).set({mouseover: false});
         });
      }
    }
    
    /* ESTIMATE LAYER */
    var estimateLayer;
    function loadEstimates(e) { // TODO
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
        c.setAttribute('id', f.data.id);
        c.setAttribute('class', f.data.class);
        if (f.data.class == 'actual-line') {
          c.setAttribute('display', 'none');
        }
        else {
          var arc = po.svg("path");
          arc.setAttribute("d", "M16,3.5c-4.142,0-7.5,3.358-7.5,7.5c0,4.143,7.5,18.121,7.5,18.121S23.5,15.143,23.5,11C23.5,6.858,20.143,3.5,16,3.5z M16,14.584c-1.979,0-3.584-1.604-3.584-3.584S14.021,7.416,16,7.416S19.584,9.021,19.584,11S17.979,14.584,16,14.584z");
        }
        $(c).hover(function(e) {
          var id = e.currentTarget.getAttribute('id').split('-').pop();
          directionDistanceEstimates.get(id).set({mouseover: true});
          $('#actual-line-' + id).show();
        }, function(e) {
          var id = e.currentTarget.getAttribute('id').split('-').pop();
          directionDistanceEstimates.get(id).set({mouseover: false});
          $('#actual-line-' + id).hide();    
        });
      }
    }
        
  :javascript
    /* MODELS */
    window.TravelFix = Backbone.Model.extend({
      name: 'travel_fix'
    })
    var landmarkBeingMovedId;
    window.Landmark = Backbone.Model.extend({
      name: 'landmark',
      move: function() {
        landmarkBeingMovedId = this.attributes.id;
        $('#instructions-block').show();
        $('#success-block').hide();
        $('#error-block').hide();
        $("#landmark-move-dialog").dialog({
    			modal: true,
    			show: 'clip',
    			hide: 'clip',
    			width: 400,
    			open: function() {
            toggleLandmarksPanel('hide');
    			},
    			buttons: {
    				"OK": function() {
    					$(this).dialog("close");
    					
    					previousMapCenter = map.center();
              map.center({lat: Number(landmarks.get(landmarkBeingMovedId).get('latitude')), lon: Number(landmarks.get(landmarkBeingMovedId).get('longitude'))});
              previousMapZoom = map.zoom();
              map.zoom(16);
              
              $(map.container()).click(function(event) {
                latLon = map.pointLocation({x: event.pageX, y: event.pageY});
                landmarks.get(landmarkBeingMovedId).unset('mouseover'); // don't want to send these attributes to the server
                landmarks.get(landmarkBeingMovedId).unset('num_visits'); 
                landmarks.get(landmarkBeingMovedId).save(
                  { longitude: latLon.lon,
                    latitude: latLon.lat,
                    manually_adjusted: 'true'
                  }, {
                    success: function(model, response) {
                      $('#instructions-block').hide();
              			  $('#success-block').show();
              			  $('#error-block').hide();
                      $("#landmark-move-dialog").dialog({
                  			modal: true,
                  			show: 'clip',
                  			hide: 'clip',
                  			buttons: {},
                  			close: function() {
                  			  toggleLandmarksPanel('show');
                  			}
                			});
                    },
                    error: function(model, response) {
                      $('#instructions-block').hide();
              			  $('#success-block').hide();
              			  $('#error-block').show();
                      $("#landmark-move-dialog").dialog({
                  			modal: true,
                  			show: 'clip',
                  			hide: 'clip',
                  			buttons: {},
                  			close: function() {
                  			  toggleLandmarksPanel('show');
                  			}
                			});
                    }
                  }
                );
                landmarks.fetch();
                $(event.currentTarget).unbind('click');
                map.zoom(previousMapZoom);
                map.center(previousMapCenter);
              });
    				},
    				"Cancel": function() {
    					$(this).dialog("close");
    				},
    			}
    		});
      }
    });
    window.LandmarkVisit = Backbone.Model.extend({
      name: 'landmark_visit'
    });
    window.DirectionDistanceEstimate = Backbone.Model.extend({
      name: 'direction_distance_estimate',
      geojson: function() {
        if (this.get("display")) {
          if (this.get("kind") === "landmarkToLandmark") {
            return [
                     { type: "Feature",
                       class: "estimated-line",
                       id: "estimated-line-" + this.id,
                       geometry: {
                         type: "LineString",
                         coordinates: [
                           [Number(landmarks.get(this.get('start_landmark_id')).get('longitude')), Number(landmarks.get(this.get('start_landmark_id')).get('latitude'))],
                           [this.get('end_point').longitude, this.get('end_point').latitude]
                         ]
                       }                    
                     },
                     { type: "Feature",
                       id: "actual-line-" + this.id,
                       class: "actual-line",
                       geometry: {
                         type: "LineString",
                         coordinates: [
                           [Number(landmarks.get(this.get('start_landmark_id')).get('longitude')), Number(landmarks.get(this.get('start_landmark_id')).get('latitude'))],
                           [Number(landmarks.get(this.get('target_landmark_id')).get('longitude')), Number(landmarks.get(this.get('target_landmark_id')).get('latitude'))]
                         ]
                       }
                     }
                   ]
          }
          else if (this.get("kind") === "landmarkToNorth") {
            //TODO
            return null;
          }
        }
      }
    });
    
    /* COLLECTIONS */
    window.TravelFixes = Backbone.Collection.extend({
      name: 'travel_fixes',
      model: TravelFix,
      url: '/api/travel_fixes',
      comparator: function(landmark) {
        return travelFixes.get('created_at');
      },
      initialize: function() {
        this.bind("change", function(m) {
          console.log('fix-' + m.id + ': ' + JSON.stringify(m.changedAttributes()));
        });
      },
      geojson: function() {
        var geojson = [];
        _.each(travelFixes.models, function(l) {
          geojson.push({ 
            id: l.attributes.id,
            geometry: {
              type: "Point",
              coordinates: [parseFloat(l.attributes.longitude), parseFloat(l.attributes.latitude)]
            }, 
            properties: {
              // name: l.attributes.name
            }
          });
        });
        return geojson;
      }
    });
    window.Landmarks = Backbone.Collection.extend({
      name: 'landmarks',
      model: Landmark,
      url: '/api/landmarks',
      comparator: function(landmark) {
        return -landmark.get('num_visits');
      },
      initialize: function() {
        this.bind("change", function(m) {
          console.log('landmark-' + m.get('id') + ': ' + JSON.stringify(m.changedAttributes()));
        })
      },
      geojson: function() {
        var geojson = [];
        _.each(landmarks.models, function(l) {
          geojson.push({ 
            id: l.attributes.id,
            geometry: {
              type: "Point",
              coordinates: [parseFloat(l.attributes.longitude), parseFloat(l.attributes.latitude)]
            }, 
            properties: {
              name: l.attributes.name
            }
          });
        });
        return geojson;
      },
      unratedLandmarks: function() {
        return landmarks.select(function(l) {
          return l.get("familiarity_rating") === null;
        });
      }
    });
    window.LandmarkVisits = Backbone.Collection.extend({
      name: 'landmark_visits',
      model: LandmarkVisit,
      url: '/api/landmark_visits.json'
    });
    window.DirectionDistanceEstimates = Backbone.Collection.extend({
      name: 'direction_distance_estimates',
      model: DirectionDistanceEstimate,
      url: '/api/direction_distance_estimates.json',
      initialize: function() {
        this.bind("change", function(m) {
          console.log('dde-' + m.get('id') + ': ' + JSON.stringify(m.changedAttributes()));
        })
      },
      geojson: function() {
        geojson = [];
        this.each(function(dde) {
          if (dde.geojson()) {
            geojson = geojson.concat(dde.geojson());
          }
        });
        return geojson;
      }
    });
    
    window.travelFixes = new TravelFixes;
    window.landmarks = new Landmarks;
    window.landmarkVisits = new LandmarkVisits;
    window.directionDistanceEstimates = new DirectionDistanceEstimates;
    
    /* VIEWS */
    window.FixesPlacard = Backbone.View.extend({
      id: 'fixes-placard',
      initialize: function() {
        travelFixes.bind('refresh', this.render);
        travelFixes.bind('change', this.change);
      },    
      render: function() {
        $('#fixes-placard .number').text(travelFixes.length);
        if (travelFixes.length == 1) $('#fixes-placard .title').text('fix');
        $('#fixes-placard').click(function(event) {
          toggleFixesPanel();
        });
      },
      change: function(m) {
        if (m.changedAttributes().mouseover) {
          toggleFixesPanel('show');
        }
      }
    });
    window.LandmarksPlacard = Backbone.View.extend({
      id: 'landmarks-placard',
      initialize: function() {
        landmarks.bind('refresh', this.render);
        landmarks.bind('change', this.change);
      },    
      render: function() {
        $('#landmarks-placard .number').text(landmarks.length);
        if (landmarks.length == 1) $('#landmarks-placard .title').text('landmark');
        $('#landmarks-placard').click(function(event) {
          toggleLandmarksPanel();
        });
      },
      change: function(m) {
        if (m.changedAttributes().mouseover) {
          toggleLandmarksPanel('show');
        }
      }
    });
    window.VisitsPlacard = Backbone.View.extend({
      id: 'visits-placard',
      initialize: function() {
        landmarkVisits.bind('refresh', this.render);
      },
      render: function() {
        $('#visits-placard .number').text(landmarkVisits.length);
        if (landmarkVisits.length == 1) $('#visits-placard .title').text('visit');
      } 
    });
    window.EstimatesPlacard = Backbone.View.extend({
      id: 'estimates-placard',
      initialize: function() {
        directionDistanceEstimates.bind('refresh', this.render);
        directionDistanceEstimates.bind('change', this.change);
      },
      render: function() {
        $('#estimates-placard .number').text(directionDistanceEstimates.length);
        if (directionDistanceEstimates.length == 1) $('#estimates-placard .title').text('estimate');
        $('#estimates-placard').click(function(event) {
          toggleEstimatesPanel();
        });
      },
      change: function(m) {
        if (m.changedAttributes().mouseover && m.get('mouseover') == true) {
          toggleEstimatesPanel('show');
        }
      }
    });
    window.FixLayerView = Backbone.View.extend({
      initialize: function() {
        travelFixes.bind('refresh', this.render);
        travelFixes.bind('change', this.change);
      },
      render: function() {
        if (fixLayer) map.remove(fixLayer);
        fixLayer = po.geoJson()
                     .features(travelFixes.geojson())
                     .on("load", loadFixes)
                     .id("fix-layer")
                     .tile(false)
                     .scale("fixed");
        map.add(fixLayer);
      },
      change: function(m) {
        if (m.changedAttributes().mouseover == true) {
          var fixLabel = po.svg('text');
          $(fixLabel).attr('id', 'fix-label-' + m.id);
          fixLabel.setAttribute('transform', 'scale(2.0) translate(8 -2)');
          var date = new Date(m.get('created_at'));
          $(fixLabel).text(day_names[date.getDay()] + ', ' + month_names[date.getMonth()] + ' ' + date.getDate() + ' ' + date.getFullYear() + ' ' + date.getHours() + ':' + date.getMinutes());
          $('#fix-icon-' + m.id).append(fixLabel);
        }
        else if (m.changedAttributes().mouseover == false) {
          $('#fix-label-' + m.id).remove();
        }
      }
    });
    window.LandmarkLayerView = Backbone.View.extend({
      initialize: function() {
        landmarks.bind('refresh', this.render);
        landmarks.bind('change', this.change);
      },
      render: function() {
        map.extent(bounds(landmarks.geojson())).zoomBy(-.5);
        if (landmarkLayer) map.remove(landmarkLayer);
        landmarkLayer = po.geoJson()
                          .features(landmarks.geojson())
                          .on("load", loadLandmarks)
                          .id("landmark-layer")
                          .tile(false)
                          .scale("fixed");
        map.add(landmarkLayer);
      },
      change: function(m) {
        if (m.changedAttributes().mouseover == true) {
          var landmarkLabel = po.svg('text');
          $(landmarkLabel).attr('id', 'landmark-label-' + m.id);
          landmarkLabel.setAttribute('transform', 'scale(2.5) translate(5 0)');
          $(landmarkLabel).text(m.get('name'));
          $('#landmark-icon-' + m.id).append(landmarkLabel);
        }
        else if (m.changedAttributes().mouseover == false) {
          $('#landmark-label-' + m.id).remove();
        }
      }
    });
    window.EstimateLayerView = Backbone.View.extend({
      initialize: function() {
        directionDistanceEstimates.bind('all', this.render);
        
      },
      render: function() {
        if (estimateLayer) map.remove(estimateLayer);
        estimateLayer = po.geoJson()
                          .features(directionDistanceEstimates.geojson())
                          .on("load", loadEstimates)
                          .id("estimate-layer")
                          .tile(false)
                          .scale("fixed");
        map.add(estimateLayer);
      }
    });
    window.FixDetailView = Backbone.View.extend({
      id: 'fix-details',
      initialize: function() {
        travelFixes.bind('change', this.change);
      },
      change: function(m) {
        if (m.changedAttributes().mouseover == true) {
          // $('#fix-details').html('<p>at: ' + m.get('created_at') + '</p>');
          // toggleFixesPanel('show');
        }
        else if (m.changedAttributes().mouseover == false) {
          // $('#fix-details').empty();
          // toggleFixesPanel('hide');
        }
      }
    });
    window.LandmarkItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'landmark-item',
      template: _.template('<%= landmark.name %> <br/>'
                           + '<div class="buttons">'
                           + '<a class="move-landmark-button" id="move-landmark-button-<%= landmark.id %>" href="#">move</a> '
                           + '<span class="estimate-buttons">'
                           + '<input type="checkbox" class="to-landmark-button" id="to-landmark-button-<%= landmark.id %>">'
                           + '<label for="to-landmark-button-<%= landmark.id %>">to</label>'
                           + '<input type="checkbox" class="from-landmark-button" id="from-landmark-button-<%= landmark.id %>">'
                           + '<label for="from-landmark-button-<%= landmark.id %>">from</label>'
                           + '</span>'
                           + '</div>'),
      initialize: function() {
        landmarks.bind('change', this.change);
      },
      render: function() {
        $(this.el).attr('id', 'landmark-item-' + this.model.id);
        $(this.el).html(this.template(this.model.toJSON()));
        $(this.el).hover(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          previousMapCenter = map.center();
          map.center({lat: Number(landmarks.get(id).get('latitude')), lon: Number(landmarks.get(id).get('longitude'))});
          landmarks.get(id).set({mouseover: true});
        }, function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          map.center(previousMapCenter);
          landmarks.get(id).set({mouseover: false});
        });
        return this;
      },
      change: function(m) {
        var showButtons = false;
        
        if (m.get('estimatesFrom') || m.get('estimatesTo')) {
          showButtons = true;
          $('#landmark-item-' + m.id + ' .buttons', this.el).show();
        }
        else if (!m.get('estimatesFrom') || !m.get('estimatesTo')) {
          showButtons = false;
          $('#landmark-item-' + m.id + ' .buttons', this.el).hide();
        }
        
        if (m.get('mouseover')) {
          $('#landmark-item-' + m.id + ' .buttons', this.el).show();
          $('#landmark-item-' + m.id).addClass('mouseover');
          $('#landmarks-panel').scrollTo('#landmark-item-' + m.id);
        }
        else {
          if (!showButtons) $('#landmark-item-' + m.id + ' .buttons', this.el).hide();
          $('#landmark-item-' + m.id).removeClass('mouseover');
        }
      }
    });
    window.LandmarkListView = Backbone.View.extend({
      id: 'landmarks-list',
      initialize: function() {
        landmarks.bind('refresh', this.render); 
      },
      render: function() {
        $("#landmarks-list").empty();
        
        landmarks.each(function(landmark) { 
          var view = new LandmarkItemView({model: landmark});
          this.$("#landmarks-list").append(view.render().el);
        });
        
        $('#landmarks-list .buttons a').button();
        $('#landmarks-list .buttons .estimate-buttons').buttonset();
        // $('#landmarks-list .buttons .estimate-buttons').position({of: $('#landmarks-list .buttons a'), my: 'left center', at: 'right center'});
        
        $('.move-landmark-button').click(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          landmarks.get(id).move();
        });
        
        $('.to-landmark-button').click(function(event) {
          id = Number($(event.currentTarget).attr('id').split('-').pop());
          ddes = directionDistanceEstimates.filter(function(dde) { return dde.get('target_landmark_id') === id })
          var newValue;
          if ($(event.currentTarget).is(':checked')) {
            newValue = true;
          }
          else {
            newValue = false;
          }
          _.each(ddes, function(dde) {
            dde.set({display: newValue});
          });
          landmarks.get(id).set({estimatesTo: newValue});
        });
        
        $('.from-landmark-button').click(function(event) {
          id = Number($(event.currentTarget).attr('id').split('-').pop());
          ddes = directionDistanceEstimates.filter(function(dde) { return dde.get('start_landmark_id') === id })
          var newValue;
          if ($(event.currentTarget).is(':checked')) {
            newValue = true;
          }
          else {
            newValue = false;
          }
          _.each(ddes, function(dde) {
            dde.set({display: newValue});
          });
          landmarks.get(id).set({estimatesFrom: newValue});
        }); 
      }
    });
    
    window.fixesPlacard = new FixesPlacard;
    window.landmarksPlacard = new LandmarksPlacard;
    window.visitsPlacard = new VisitsPlacard;
    window.estimatesPlacard = new EstimatesPlacard;
    window.fixLayerView = new FixLayerView;
    window.landmarkLayerView = new LandmarkLayerView;
    window.estimateLayerView = new EstimateLayerView;
    window.fixDetailView = new FixDetailView;
    window.landmarksListView = new LandmarkListView;
    
    /* LOAD DATA */    
    travelFixes.fetch();
    landmarks.fetch(); //refresh(#{current_user.landmarks.to_json.html_safe});
    landmarkVisits.fetch(); //refresh(#{current_user.landmark_visits.to_json.html_safe});
    directionDistanceEstimates.fetch(); //refresh(#{current_user.direction_distance_estimates.to_json.html_safe});
    
    /* PANEL STUFF */
    function toggleFixesPanel(showHide) {
      if (!showHide) {
        $('#fixes-panel').slideToggle();
      } else if (showHide == "show") {
        if ($('#fixes-panel').css('display') == 'none') { 
          $('#fixes-panel').show('slide', { direction: 'down' });
        }
      } else if (showHide == "hide") {
        if ($('#fixes-panel').css('display') != 'none') { 
          $('#fixes-panel').hide('slide', { direction: 'down' });
        }
      }
    }
    function toggleLandmarksPanel(showHide) {
      if (!showHide) {
        $('#landmarks-panel').slideToggle();
      } else if (showHide == "show") {
        if ($('#landmarks-panel').css('display') == 'none') { 
          $('#landmarks-panel').show('slide', { direction: 'down' });
        }
      } else if (showHide == "hide") {
        if ($('#landmarks-panel').css('display') != 'none') { 
          $('#landmarks-panel').hide('slide', { direction: 'down' });
        }
      }
    }
    function toggleEstimatesPanel(showHide) {
      if (!showHide) {
        $('#estimates-panel').slideToggle();
      } else if (showHide == "show") {
        if ($('#estimates-panel').css('display') == 'none') { 
          $('#estimates-panel').show('slide', { direction: 'down' });
        }
      } else if (showHide == "hide") {
        if ($('#estimates-panel').css('display') != 'none') { 
          $('#estimates-panel').hide('slide', { direction: 'down' });
        }
      }
    }
    
  #landmark-questionnaire-dialog(title="Landmark Questionnaire")
    %p#landmark-questionnaire-error.ui-state-error(style="display: none;") Error sending your familiarity rating to the server. Please try again.
    %p You've marked new landmarks recently. Please rate your familiarity with each on a scale of 1 (hardly know this place) to 5 (know the place very well).
    #landmark-questionnaire-list
    
  :javascript
    window.LandmarkQuestionnaireView = Backbone.View.extend({
      id: 'landmark-questionnaire-dialog',
      initialize: function() {
        landmarks.bind('refresh', this.render);
      },
      render: function() {
        if (landmarks.unratedLandmarks().length > 0) {
          $("#landmark-questionnaire-list").empty();
        
          _.each(landmarks.unratedLandmarks(), function(landmark) { 
            var view = new LandmarkQuestionnaireItemView({model: landmark});
            this.$("#landmark-questionnaire-list").append(view.render().el);
          });        
        
          var open = (_.select(landmarks.pluck("familiarity_rating"), function(l) { return l === null; }).length > 0);
      
          $("#landmark-questionnaire-dialog").dialog({
          	autoOpen: open,
          	height: 500,
          	width: 550,
          	modal: true,
            // buttons: {
            //  "OK": function() {
            //      $(this).dialog("close");
            //  }
            // },
          	close: function() {
          	}
          });
        }
      }
    });
    window.LandmarkQuestionnaireItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'landmark-questionnaire-item',
      template: _.template('<%= landmark.name %> <div class="landmark-rating-radios">'
                           + '<input type="radio" name="landmark-<%= landmark.id %>-rating" id="landmark-<%= landmark.id %>-rating-1"/>'
                           + '<label for="landmark-<%= landmark.id %>-rating-1">1</label>'
                           + '<input type="radio" name="landmark-<%= landmark.id %>-rating" id="landmark-<%= landmark.id %>-rating-2"/>'
                           + '<label for="landmark-<%= landmark.id %>-rating-2">2</label>'
                           + '<input type="radio" name="landmark-<%= landmark.id %>-rating" id="landmark-<%= landmark.id %>-rating-3"/>'
                           + '<label for="landmark-<%= landmark.id %>-rating-3">3</label>'
                           + '<input type="radio" name="landmark-<%= landmark.id %>-rating" id="landmark-<%= landmark.id %>-rating-4"/>'
                           + '<label for="landmark-<%= landmark.id %>-rating-4">4</label>'
                           + '<input type="radio" name="landmark-<%= landmark.id %>-rating" id="landmark-<%= landmark.id %>-rating-5"/>'
                           + '<label for="landmark-<%= landmark.id %>-rating-5">5</label></div>'),
      initialize: function() {
      },
      render: function() {
        $(this.el).attr('id', 'landmark-questionnaire-item-' + this.model.id);
        $(this.el).html(this.template(this.model.toJSON()));
        $('.landmark-rating-radios', this.el).buttonset();
        $('.landmark-rating-radios input', this.el).change(function(event) {
          var landmarkId = $(event.currentTarget).attr('id').split('-')[1];
          var rating = $(event.currentTarget).attr('id').split('-').pop();
          landmarks.get(landmarkId).unset('num_visits'); // don't want to send these attributes to server
          landmarks.get(landmarkId).unset('mouseover');
          landmarks.get(landmarkId).save({familiarity_rating: rating}, {
            success: function(model, response) {
              $('#landmark-questionnaire-item-' + model.id).toggle('drop', {}, 700);
              if (landmarks.unratedLandmarks().length == 0) $('#landmark-questionnaire-dialog').dialog("close");
              $('#landmark-questionnaire-error').hide();
            },
            error: function(model, response) {
              $('#landmark-questionnaire-error').show();
              $('#landmark-questionnaire-item-' + model.id + ' input').attr('checked', '');
              $('#landmark-questionnaire-item-' + model.id + ' input').button('refresh');
              $('#landmark-questionnaire-item-' + model.id).effect("shake", { times: 2, distance: 10 }, 150);
              // alert('Error saving your familiarity rating for ' + model.get('name') + '. Please try again.');
            }
          });
        });
        
        return this;
      },
    });
    window.landmarkQuestionnaireView = new LandmarkQuestionnaireView;
  