!!!
%head
  =stylesheet_link_tag "viewer"
  =javascript_include_tag "jquery"
  =javascript_include_tag "json2", "underscore", "backbone", "backbone.rails"
  =javascript_include_tag "polymaps/polymaps.js"
  =javascript_include_tag "OpenLayers-2.9.1/OpenLayers"
  =javascript_include_tag "jquery.svg/jquery.svg"
  =javascript_include_tag "http://github.com/simplegeo/polymaps/raw/v2.3.0/lib/raphaeljs/icons.js"

%body
  #map
  #user-panel.panel
    %li Welcome <strong>#{current_user.full_name}</strong>
    %li <a href="#">Your details</a>
    %li <a href="#">Help</a>
    %li #{link_to "Sign out", destroy_user_session_path}
  #travel-panel.panel
  #places-panel.panel
    #landmarks-placard.placard
      .number ?
      .title landmarks
    #visits-placard.placard
      .number ?
      .title visits
    #estimates-placard.placard
      .number ?
      .title estimates
  #landmarks-panel.panel
    #landmarks-list
    
  :javascript
    var po = org.polymaps;
    
    var map = po.map()
        .container(document.getElementById("map").appendChild(po.svg("svg")))
        .add(po.interact())
        .add(po.hash());
        
    map.add(po.image()
        .url(po.url("http://{S}tile.cloudmade.com"
        + "/7edf224d2b714c238a8ed621091d63bc"
        + "/998/256/{Z}/{X}/{Y}.png")
        .hosts(["a.", "b.", "c.", ""])));
        
    map.add(po.compass()
        .pan("none"));
        
    var landmarkLayer;
    var ee;
    function loadLandmarks(e) { 
      for (var i = 0; i < e.features.length; i++) {
        var f = e.features[i],
            c = f.element,
            g = f.element = po.svg("g");
        
        /* landmark icon */
        g.appendChild(icons.marker());
        g.setAttribute("transform", c.getAttribute("transform") + ", scale(3.0)");
        ee = g.getAttribute("transform");
        c.parentNode.replaceChild(g, c);
        f.element.setAttribute('id', 'landmark-icon-' + f.data.id);
        f.element.appendChild(po.svg("id")
         .appendChild(document.createTextNode(f.data.id))
         .parentNode);
        
        /* landmark menu */
        // var landmarkMenu = _.template('<div id="landmark-menu-<%= id %>" class="landmark-menu">'
        //                               + '<% if (showFromTo) { %>'
        //                               + '<div class="from"><a href="#">from</a></div>'
        //                               + '<div class="to"><a href="#">to</a></div>'
        //                               + '<% } %>'
        //                               + '<div class="here"><a href="#"><%= landmarks.get(id).attributes.name %></a></div>'
        //                               + '</div>');
        $(f.element).mouseover(function(event) {
          id = $('id', event.currentTarget).text();
          if (!landmarks.get(id).menuOpen) { 
            // position = $(event.currentTarget).position();
            // $('#map').prepend(landmarkMenu({id: id, showFromTo: false}));
            // $('#landmark-menu-' + id).css('left', position.left);
            // $('#landmark-menu-' + id).css('top', position.top);
            var landmarkLabel = po.svg('text');
            $(landmarkLabel).attr('id', 'landmark-label-' + id);
            landmarkLabel.setAttribute('transform', 'scale(2.5) translate(5 0)');
            $(landmarkLabel).text(landmarks.get(id).attributes.name);
            $(event.currentTarget).append(landmarkLabel);
          }
        });
        $(f.element).mouseout(function(event) {
          id = $('id', event.currentTarget).text();
          // if (!landmarks.get(id).menuOpen) { 
          //   $('#landmark-menu-' + id).remove();
          // }
          $('#landmark-label-' + id).remove();
        });
        $(f.element).click(function(event) {
          id = $('id', event.currentTarget).text();
          // if (!landmarks.get(id).menuOpen) {          
          //   position = $(event.currentTarget).position();
          //   
          //   $('#map').prepend(landmarkMenu({id: id, showFromTo: true}));
          //   $('#landmark-menu-' + id).css('left', position.left);
          //   $('#landmark-menu-' + id).css('top', position.top); 
          //   landmarks.get(id).menuOpen = true;
          // }
          // else {
          //   $('#landmark-menu-' + id + ' from').remove();
          //   $('#landmark-menu-' + id + ' to').remove();
          //   landmarks.get(id).menuOpen = false;
          // }
        });
      }
    }
    
    var maxExtent = new OpenLayers.Bounds();
    function zoomLandmarks() {
      var swLat, swLong, neLat, neLon;
      
      _.each(landmarks.models, function(l) {
        maxExtent.extend(new OpenLayers.LonLat(l.attributes.longitude, l.attributes.latitude));
      });
      
      map.extent([{lat: maxExtent.bottom, lon: maxExtent.left}, {lat: maxExtent.top, lon: maxExtent.right}]);
    }
        
  :javascript
    /* MODELS */
    var landmarkBeingMovedId;
    window.Landmark = Backbone.Model.extend({
      name: 'landmark',
      // menuOpen: false,
      displayingToEstimates: false,
      displayingFromEstimates: false,
      move: function() {
        var yes = confirm('To move ' + this.attributes.name + ' to a new location, click a point on the map.');
        if (yes) {
          landmarkBeingMovedId = this.attributes.id;
          $(map.container()).click(function(event) {
            latLon = map.pointLocation({x: event.pageX, y: event.pageY});
            landmarks.get(landmarkBeingMovedId).attributes.longitude = latLon.lon;
            landmarks.get(landmarkBeingMovedId).attributes.latitude = latLon.lat;
            landmarks.get(landmarkBeingMovedId).save();
            landmarks.fetch();
            $(event.currentTarget).unbind('click');
          });
        }
      }
    });
    window.LandmarkVisit = Backbone.Model.extend({
      name: 'landmark_visit'
    });
    window.DirectionDistanceEstimate = Backbone.Model.extend({
      name: 'direction_distance_estimate',
      displaying: false
    });
    
    /* COLLECTIONS */
    window.Landmarks = Backbone.Collection.extend({
      name: 'landmarks',
      model: Landmark,
      url: '/api/landmarks',
      geojson: function() {
        var geojson = [];
        _.each(landmarks.models, function(l) {
          geojson.push({ 
            id: l.attributes.id,
            geometry: {
              type: "Point",
              coordinates: [parseFloat(l.attributes.longitude), parseFloat(l.attributes.latitude)]
            }, 
            properties: {
              name: l.attributes.name
            }
          });
        });
        return geojson;
      }
    });
    window.LandmarkVisits = Backbone.Collection.extend({
      name: 'landmark_visits',
      model: LandmarkVisit,
      url: '/api/landmark_visits.json'
    });
    window.DirectionDistanceEstimates = Backbone.Collection.extend({
      name: 'direction_distance_estimates',
      model: DirectionDistanceEstimate,
      url: '/api/direction_distance_estimates.json'
    });
    
    window.landmarks = new Landmarks;
    window.landmarkVisits = new LandmarkVisits;
    window.directionDistanceEstimates = new DirectionDistanceEstimates;
    
    /* VIEWS */
    window.LandmarksPlacard = Backbone.View.extend({
      id: 'landmarks-placard',
      initialize: function() {
        landmarks.bind('refresh', this.render);
      },
      render: function() {
        $('#landmarks-placard .number').text(landmarks.length);
        if (landmarks.length == 1) $('#landmarks-placard .title').text('landmark');
      } 
    });
    window.VisitsPlacard = Backbone.View.extend({
      id: 'visits-placard',
      initialize: function() {
        landmarkVisits.bind('refresh', this.render);
      },
      render: function() {
        $('#visits-placard .number').text(landmarkVisits.length);
        if (landmarkVisits.length == 1) $('#visits-placard .title').text('visit');
      } 
    });
    window.EstimatesPlacard = Backbone.View.extend({
      id: 'estimates-placard',
      initialize: function() {
        directionDistanceEstimates.bind('refresh', this.render);
      },
      render: function() {
        $('#estimates-placard .number').text(directionDistanceEstimates.length);
        if (directionDistanceEstimates.length == 1) $('#estimates-placard .title').text('estimate');
      } 
    });
    window.LandmarkLayerView = Backbone.View.extend({
      initialize: function() {
        landmarks.bind('refresh', this.render);
      },
      render: function() {
        if (landmarkLayer) map.remove(landmarkLayer);
        landmarkLayer = po.geoJson()
                         .features(landmarks.geojson())
                         .on("load", loadLandmarks)
                         .id("landmark-layer")
                         .tile(false)
                         .scale("fixed");
        map.add(landmarkLayer);
        zoomLandmarks();
      }
    });
    window.LandmarkItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'landmark-item',
      template: _.template('<%= landmark.name %> <br/>'
                           + '<div class="buttons">'
                           + '<a class="move-landmark-link" id="move-landmark-link-<%= landmark.id %>" href="#">move</a> | '
                           + '<a class="to-landmark-link" id="to-landmark-link-<%= landmark.id %>" href="#">to</a> | '
                           + '<a class="from-landmark-link" id="from-landmark-link-<%= landmark.id %>" href="#">from</a>'
                           + '</div>'),
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        $(this.el).mouseover(function(event) {
          $('.buttons', event.currentTarget).show();
        });
        $(this.el).mouseout(function(event) {
          $('.buttons', event.currentTarget).hide();
        });
        return this;
      },
    });
    window.LandmarkListView = Backbone.View.extend({
      id: 'landmarks-list',
      initialize: function() {
        landmarks.bind('refresh', this.render); 
      },
      render: function() {
        $("#landmarks-list").empty();
        
        landmarks.each(function(landmark) { 
          var view = new LandmarkItemView({model: landmark});
          this.$("#landmarks-list").append(view.render().el);
        });
        
        $('.move-landmark-link').click(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          landmarks.get(id).move();
        });
        
        $('.to-landmark-link').click(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          alert('to ' + id);
        });
        
        $('.from-landmark-link').click(function(event) {
          id = $(event.currentTarget).attr('id').split('-').pop();
          alert('from ' + id);
        });
        
        
      }
    });
    
    window.landmarksPlacard = new LandmarksPlacard;
    window.visitsPlacard = new VisitsPlacard;
    window.estimatesPlacard = new EstimatesPlacard;
    window.landmarkLayerView = new LandmarkLayerView;
    window.landmarksListView = new LandmarkListView;
    
    /* LOAD DATA */    
    landmarks.fetch(); //refresh(#{current_user.landmarks.to_json.html_safe});
    landmarkVisits.fetch(); //refresh(#{current_user.landmark_visits.to_json.html_safe});
    directionDistanceEstimates.fetch(); //refresh(#{current_user.direction_distance_estimates.to_json.html_safe});